{"name": "test_airtel_links", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <button class=\"btn-circle icn-rupee\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed", "trace": "self = <testcases.airtel.Test_1 object at 0x04899508>\n\n    def test_airtel_links(self):\n        driver = webdriver.Firefox()\n        driver.get(\"https://www.airtel.in\")\n        time.sleep(10)\n        # driver.find_element_by_class_name(\"moe-btn moe-btn-block\").click()\n        action = ActionChains(driver)\n        prepaid = driver.find_element_by_xpath(\"/html/body/header/div/div[2]/div[1]/div[1]/div[1]/h3\")\n        action.move_to_element(prepaid).perform()\n        plans = driver.find_element_by_xpath(\"/html/body/header/div/div[2]/div[1]/div[1]/div[1]/ul/li[3]/a\")\n        action.move_to_element(plans).perform()\n        plans.click()\n        plans_xpath = \"//*[@class='clear pack-detail-wrap first-padding']\"\n        plans = driver.find_elements_by_xpath(plans_xpath)\n        df = {\n            \"S.no\": [],\n            \"plan_rate\": [],\n            \"validation\": []\n        }\n        count = 1\n        for i in range(1, len(plans) + 1):\n            plans_1_xpath = plans_xpath + \"[{}]\".format(i) + \"//*[@class='pack-detail-row']\"\n            plans_1 = driver.find_elements_by_xpath(plans_1_xpath)\n            for j in range(1, len(plans_1) + 1):\n                plans_2_xpath = plans_1_xpath + \"[{}]\".format(j) + \"//*[@class='btn-circle icn-rupee']\"\n                plans_2 = driver.find_element_by_xpath(plans_2_xpath)\n                try:\n                    plans_2.click()\n                    df[\"S.no\"].append(count)\n>                   df[\"plan_rate\"].append(plans_2.text)\n\ntestcases\\airtel.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\base_env\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n..\\..\\base_env\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n..\\..\\base_env\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x097844A8>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"The element reference of <button clas...req<@chrome://marionette/content/listener.js:523:29\\\\ndispatch/<@chrome://marionette/content/listener.js:522:15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: The element reference of <button class=\"btn-circle icn-rupee\"> is stale; either the element is no longer attached to the DOM, it is not in the current frame context, or the document has been refreshed\n\n..\\..\\base_env\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: StaleElementReferenceException"}, "start": 1598894195599, "stop": 1598894228082, "uuid": "8ee2a3c7-9a1f-43be-81ab-cf45f4845b27", "historyId": "35f2b808bb456e1d5fa26b0d286be956", "testCaseId": "ca873930cd6d57d0c55903442d0ddf87", "fullName": "testcases.airtel.Test_1#test_airtel_links", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "airtel"}, {"name": "subSuite", "value": "Test_1"}, {"name": "host", "value": "DESKTOP-NV04TIP"}, {"name": "thread", "value": "11208-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.airtel"}]}